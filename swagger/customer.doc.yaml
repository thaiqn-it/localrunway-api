components:
  schemas:
    Customer:
      type: object
      required:
        - phoneNumber
        - password
        - name
      properties:
        id:
          type: string
          fommat: uuid
          description: the auto generated id of customer
        phoneNumber:
          type: string
          description: The customer Phone Number
        email:
          type: string
          description: Email of the customer
        password:
          type: string
          description: Password to login of customer
        name:
          type: string
          description: The name of customer
        status:
          type: string
          emum: ["ACTIVE", "INACTIVE"]
          description: The status of customer's account
        hobby:
          type: string
          description: the hobby of customer
        job:
          type: string
          description: the job of customer
        gender:
          type: string
          enum: ["MALE", "FEMALE", "OTHER"]
          description: the gender of customer
        fb_userId:
          type: string
          description: The facebook userId of customer
          example: "EAAYGlZANz2bABALjPuFvvHhlUNhLwrz0ihQrHQODCZA0dhTVR4jrtYtTIuXHSwNZAPEhgW4ZCYks8ZAAnEWV1NkpdJezYtLKx8NNxMsmkFGg0nyxlaZBnGx2NvtoNrq8DvuYWDjktFDUeqEgAZAqjbtK3U2UlsF7uE5RJhux1k5KQK7VRrBkfLQ4ZAgibEN3gOnZB4rHXnjM5PTqBSIW7UxOL0cpbOuOGQxt2VbmxA6mwZDZD"
        firstBoughtBrandIds:
          type: string
          description: The First bought brand id of customer 
        expoPushToken:
          type: string
          description: the token to push notification    
  response:
    customerProfile:
      type: object
      properties: 
        status: 
          type: string
        _id:   
          type: string
          fommat: uuid
        email:
          type: string
        phoneNumber: 
          type: string
        name:
          type: string
        gender: 
          type: string
        job:
          type: string
        hobby:
          type: string
        expoPushToken:
          type: string            
tags:
  name: Customer
  description: The Customer Management Apis
/api/customers/me:
  get:
    security:
      - customerAuth: []
    summary: Return the customer's infomation
    tags: [Customer]
    responses:
      200:
        description: the customer's infomation
        content:
          application/json:
            type: object
            schema:
              $ref: '#/components/response/customerProfile'
      400:
        description: Wrong Authentication
        content:
          application/json:
            type: object
            schema:
              error:
                type: string
            example:
              error: Wrong Authentication          
  put:
    security:
      - customerAuth: []
    summary: Update the customer's infomation
    tags: [Customer]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              hobby:
                type: string
              job:
                type: string
              name: 
                type: string
              gender:
                type: string
            example:
              email: sample@gmail.com
              password: tinhbandieuky
              hobby: football
              job: Student
              name: Dinh Phu Cuong
              gender: "MALE"
    responses:
      200:
        description: the customer's infomation
        content:
          application/json:
            type: object
            schema:
              type: object
              properties:
                customer:
                    $ref: '#/components/response/customerProfile'
      400:
        description: Wrong Authentication
        content:
          application/json:
            type: object
            schema:
              error:
                type: string
            example:
              error: Wrong Authentication
      500:
        description: Data is not valid
        content:
          application/json:
            type: object
            schema:
              type: object
              properties:
                error:
                  type: string
                errorParams:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
                    hobby: 
                      type: string
                    name:
                      type: string
                    gender: 
                      type: string
/api/customers/login:
  post:
    summary: "Login"
    tags: [Customer]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              password:
                type: string
              phoneNumber:
                type: string
            example:
              phoneNumber: "0123456791"
              password: "tinhbandieuky"    
    responses:
      200:
        description: login succses and return the JWT auth token
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21lcklkIjoiNjBhZTU5YzgxYmNhOTQ1ZmY0YjUzMWU5IiwiaWF0IjoxNjIzNDIyNDI4fQ.JlN18-raoWUZP_aKZ427PW0SxLJxPRCmhEqg3BSJYPU  
      500:
        description: bad request
/api/customers/fbLogin:
  post:
    summary: "Login by Facebook token"
    tags: [Customer]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string 
            example: 
              access_token: EAAE2ZCL5nszABAFaEwUvD8I2XVov07FiIZBSlIKqdpQIatUg3X4EMJLIrylD7bwCasXjF5DomToZCpr4HFhYKnYZAl8sSKmmmpg8yJ6kj3oVey6Ix2bgeqtDgSAAFxBjfv4Rj9vrtcDlhii8ciZCo0r13KS0ZBD8XZB6dEZCadZAInBq8R8WsUb5fkOb3P6i0PMUiaW4MqQYfoxW8eQVqPJsN9Ox28yQqs0GWub12cPLszucXZC5ludiaoJzQEiZCozIXsZD
    responses:
      200:
        description: login succses and return the JWT auth token
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjdXN0b21lcklkIjoiNjBhZTU5YzgxYmNhOTQ1ZmY0YjUzMWU5IiwiaWF0IjoxNjIzNDIyNDI4fQ.JlN18-raoWUZP_aKZ427PW0SxLJxPRCmhEqg3BSJYPU  
      500:
        description: bad request
/api/customers/register:
  post:
    summary: "Registration"
    tags: [Customer]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              phoneNumber:
                type: string
              email:
                type: string
              password:
                type: string
              hobby:
                type: string
              job:
                type: string
              name: 
                type: string
              fb_userId:
                type: string
              status:
                type: string  
              gender:
                type: string
              firstBoughtBrandIds:  
                type: array    
            example:
              phoneNumber: "0937287333"
              email: sample@gmail.com
              password: tinhbandieuky
              hobby: football
              job: Student
              name: Dinh Phu Cuong
              fb_userId: 
              status: "ACTIVE"
              gender: "MALE"
              firstBoughtBrandIds: []     
    responses:
      200:
        description: Register succses and return the JWT auth token
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                    $ref: '#/components/schemas/Customer'
      500:
        description: bad request
      400:
        description: validation error
        content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
              errorParams:
                type: object
/api/customers/resetPassword:
  put:
    security:
      - customerAuth: []
    summary: "ResetPassword "
    tags: [Customer]
    requestBody:                
      required: true
      content:
        application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                newPassword:
                  type: string  
    responses:
      200:
        description: Register succses and return the JWT auth token
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                    $ref: '#/components/response/customerProfile'
      500:
        description: bad request
      400:
        description: validation error
        content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
              errorParams:
                type: object
/api/customers/setExpoPushToken:
  post:
    security:
      - customerAuth: []
    summary: "Set Token To Push Notification "
    tags: [Customer]
    requestBody:                
      required: true
      content:
        application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "ExponentPushToken[gcPOMoAq8sU6TMCQA4ah_i]"

    responses:
      200:
        description: Notification is send to user
        content:
          application/json:
            schema:
              type: object
              properties:
                customer:
                    $ref: '#/components/response/customerProfile'
      500:
        description: bad request
      400:
        description: validation error
        content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
              errorParams:
                type: object                